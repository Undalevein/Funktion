Funktion {
  Program        = (GlobalRange "\n")? "\n"* ListOf<(Statement | FuncDef | ""), ("\n"+ | space+)>

  FuncDef        = id "(" id ")" "=" "\n"? Expr (";" (FuncDef | Expr))*
  FuncCall		   = id "(" Expr ")"
  Expr           = CondExpr ("," "\n"? CondExpr)*
  CondExpr       = "?" CondExpr ("==" | "!=" | "<=" | "<" | ">=" | ">") CondExpr "=>" BitwiseExpr ":" "\n"? CondExpr --ternary
                 | BitwiseExpr
  BitwiseExpr    = BitwiseExpr ("&" | "|" | "^") ShiftExpr              --binary
                 | ShiftExpr
  ShiftExpr      = ShiftExpr ("<<" | ">>") AddExpr                --binary
                 | AddExpr
  AddExpr        = AddExpr ("+" | "-") MulExpr                    --binary
                 | MulExpr
  MulExpr        = MulExpr ("*" | "/" | "%") Factor               --binary 
                 | MulExpr idchar                                  --mul
                 | Factor
  Factor         = Primary "**" Factor                            --exponentiation
                 | "-" Factor                                      --negation
                 | "~" Factor                                      --bitwisenegation
                 | Primary
  Primary        = num
                 | StepCall
                 | FuncCall
                 | InputStmt
                 | "(" BitwiseExpr ")"							--parens
                 | id
                 | stringliteral 
                 | charliteral

  Statement      = PrintStmt
                 | StepCall
                 | InputStmt
  PrintStmt      = "print" "(" (TimeCall | CondExpr) ")"
  TimeCall       = id ":" num
  StepCall       =  id "(" id ")" "." "step" "(" num? ")"
  StepCallMulti  = FunctionGroup "." "step" "(" num? ")"
  InputStmt      = "input" "(" stringliteral? ")"

  GlobalRange    = range timestep?
  //LocalRange     = "[" id "]:" range timestep?
  FunctionGroup  = "{" Expr "}"
  
  numrange       = "`" num ".." (num)? "`"
                 | "`" (num)? ".." num "`"
  charrange      = "`" charliteral ".." (charliteral)? "`"
                 | "`" (charliteral)? ".." (charliteral) "`"
  range          = numrange | charrange
  
  timestep       = "t" "-"? num "t"
 
  num            = "-"? digit+ ("." digit+)?
  stringliteral  = "\"" stringchar* "\""
  stringchar     = (~"\\" ~"\"" any) | "\\\\" | "\\\"" | escapechar
  charliteral    = "\'" char "\'"
  char           = (~"\\" ~"\'" any) | "\\\\" | "\\\'" | escapechar
  escapechar     = " " | "\\n" | "\\t" | "\\r" | "\\b"
 
  id             = ~keyword letter idchar*
  idchar         = letter |"_"
  
  input          = "input" ~idchar
  print          = "print" ~idchar
  step           = "step" ~idchar
  keyword        = input | print | step

  space         := ~"\n" "\x00".."\x20" 
                 | "//" (~"\n" any)*  ("\n" | end)                 -- comment
}