Funktion {
  Program      = (globalRange)? (Statement | FuncDef)+

  FuncDef      = id "(" id ")" "=" Expr
  FuncCall     = id "(" id ")"
  
  Expr         = Action ("," Action)*
  Action       = BitwiseExpr
  BitwiseExpr  = ShiftExpr (("&" | "|") ShiftExpr)*
  ShiftExpr    = AddExpr (("<<" | ">>") AddExpr)*
  AddExpr      = MulExpr (("+" | "-") MulExpr)*
  MulExpr      = Primary (("**" | "*" | "/" | "%") Primary)*
  Primary      = num 
               | id 
               | string 
               | char 
               | FuncCall 
               | Statement
               | FuncCall
               | id 
               | stringliteral 
               | charliteral

  Statement    = printStmt 
  					   | timeCall
               | stepCall
               | inputCall
               | "+"
  printStmt    = "print" "(" (string | timeCall) ")"
  timeCall     = id "(" id "):" num
  stepCall     = id "(" id ").step(" num ")"
  inputCall    = "input" "(" string ")"

  globalRange  = range (whitespace+ timeStep)?
  localRange   = "[" id "]:" range (whitespace+ timeStep)?
  range        = numRange | charRange
  numRange     = "`" num ".." (num)? "`"
               | "`" (num)? ".." num "`"
  charRange    = "`" charliteral ".." (charliteral)? "`"
               | "`" (charliteral)? ".." (charliteral) "`"
  timeStep     = "t" num "t"
  
  stringliteral       = "\"" stringchar* "\""
  charliteral         = "\'" char "\'"
 
  id           = ~keyword letter idchar*
  idchar       = letter | digit | "_"
  num          = digit+ ("." digit+)?
  keyword      = "print" | "step" | "input"

  space       += "//" (~"\n" any)*  -- comment
  specialchar  = "\\" | "\'" | "\""
  whitespace   = " " | "\n" | "\t" | "\r"
}