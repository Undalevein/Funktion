Funktion {
  Program      = (globalRange)? (Statement | FuncDef)+

  FuncDef      = id "(" id ")" "=" Expr
  FuncCall     = id "(" id ")"
  
  Expr         = CondExpr ("," CondExpr)*
  CondExpr     = "?" CondExpr "==" BitwiseExpr "=>" BitwiseExpr --binary
               | BitwiseExpr
  BitwiseExpr  = BitwiseExpr ("&" | "|") ShiftExpr			        --binary
  						 | ShiftExpr
  ShiftExpr    = ShiftExpr ("<<" | ">>") AddExpr			          --binary
  					   | AddExpr
  AddExpr      = AddExpr ("+" | "-") MulExpr				            --binary
  					   | MulExpr
  MulExpr      = MulExpr ("*" | "/" | "%") Factor		            --binary
  					   | Factor
  Factor 		   = Primary "**" Factor							              --exponentiation
  					   | "-" Factor											                --negation
               | "~" Factor											                --bitwisenegation
               | stepCall
               | Primary
  
  Primary      = num 
               | Statement
               | FuncCall
               | id 
               | stringliteral 
               | charliteral

  Statement    = printStmt 
  					   | timeCall
               | stepCall
               | inputCall
               | "+"
  printStmt    = "print" "(" (stringliteral | timeCall | id) ")"
  timeCall     = id "(" id "):" num
  stepCall     = id "(" id ").step(" num? ")"
  inputCall    = "input" "(" stringliteral ")"

  globalRange  = range (whitespace+ timeStep)?
  localRange   = "[" id "]:" range (whitespace+ timeStep)?
  range        = numRange | charRange
  numRange     = "`" num ".." (num)? "`"
               | "`" (num)? ".." num "`"
  charRange    = "`" charliteral ".." (charliteral)? "`"
               | "`" (charliteral)? ".." (charliteral) "`"
  timeStep     = "t" num "t"
  
  stringliteral       = "\"" stringchar* "\""
  charliteral         = "\'" char "\'"
 
  id           = ~keyword letter idchar*
  idchar       = letter | digit | "_"
  num          = digit+ ("." digit+)?
  keyword      = "print" | "step" | "input"

  space       += "//" (~"\n" any)*                               -- comment
  char =  (~"\\" ~"\'" any) | "\\\\" | "\\\'" | whitespace
  stringchar =  (~"\\" ~"\"" any) | "\\\\" | "\\\"" | whitespace
  whitespace   = " " | "\\n" | "\\t" | "\\r"
}